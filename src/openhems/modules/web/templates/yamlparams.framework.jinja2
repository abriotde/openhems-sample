<!DOCTYPE html>
<html lang="en">
<head>
	<title>OpenHEMS</title>
	<link rel="stylesheet" href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css">
	<link rel="stylesheet" href="{{request.static_url('openhems.modules.web:../../../../img/openhems.css')}}">
	<script src="https://code.jquery.com/jquery-3.7.1.js"></script>
	<script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
	<link rel="stylesheet" href="//code.jquery.com/mobile/1.5.0-alpha.1/jquery.mobile-1.5.0-alpha.1.min.css">
	<script src="//code.jquery.com/mobile/1.5.0-alpha.1/jquery.mobile-1.5.0-alpha.1.min.js"></script>
</head>
<body>
<nav class="menu">
  <ul>
    <li><a href="/">Devices program</a></li>
    <li><a href="https://github.com/abriotde/openhems-sample/tree/main">More</a></li>
  </ul>
</nav>
<div class="page">
	<h1>Parameters</h1>
	<div><img id="waitImg" src="{{request.static_url('openhems.modules.web:../../../../img/wait.gif')}}" style="display:none" alt="Wait"></img><div>
	<div>VPN is <b id="vpnStatus">{{ vpn }}</b>.<button id="vpnButton"></button></div>

	<form name="yamlParamsForm" action="/yamlparams" method="POST" onsubmit="return setNetwork()">
	<div id="yamlParams">
		{%YAML_PARAMS%}
	</div>
	<input id="submitYamlParams" type="submit" value="Submit" src="{{request.static_url('openhems.modules.web:../../../../img/correct_32.ico')}}">
	</form>
</div>
<div id="addNodePopup" style="visibility: hidden;" class="">
	<div id="newnode-class">
	</div>
	<div id="newnode-class-form">
	</div>

	<button type="button" data-theme="b" onclick="hideAddNodePopup()">Cancel</button>
	<button type="button" data-theme="b" onclick="addNode()">Add</button>
</div>
<script>
const vpn = {{ vpn|tojson }};
const availableNodes = {{ availableNodes|tojson }};
var objectLists = {}
const vpnButton = document.getElementById("vpnButton");
const vpnStatus = document.getElementById("vpnStatus");
const waitImg = document.getElementById("waitImg");
var network = []
if (vpn=="up") {
	connectedVPN(true);
} else {
	connectedVPN(false);
}
/**
	Function to initiate page to the state of the VPN.
	@param : bool : True if VPN is connected.
*/
function connectedVPN(connect) {
	url = "/vpn?connect="+(connect?"false":"true");
	vpnButton.onclick = function () {
		waitImg.style.display = "inline";
		vpnButton.style.display = "none";
		fetch(url, { method: 'GET' })
			.then(Result => Result.json())
			.then(retVal => {
				console.log('response :  '+retVal);
				connectedVPN(retVal.connected);
				waitImg.style.display = "none";
				vpnButton.style.display = "inline";
			})
			.catch(errorMsg => { console.log(errorMsg); }); 
	}
	vpnButton.innerHTML = connect?"Disconnect":"Connect";
	vpnStatus.innerHTML = connect?"up":"down";
}
function changeSthg() {
	// console.log("changeSthg()");
		document.getElementById("submitYamlParams")
			.src = "http://localhost:8000/img/save_32.ico";
}
function getNetwork() {
	val = document.getElementById('network.nodes').value.trim().replaceAll("'","\"");
	console.log("Network0:",val);
	network = JSON.parse(val);
	console.log("Network:",network);
}
function setNetwork() {
	document.getElementById('network.nodes').value = JSON.stringify(network);
	return true;
}
function getElement(index, attr, node, level=0) {
	var currentElement = document.createElement("div");
	if (level>0) {
		currentElement.classList.add("col-75");
	}
	currentElement.classList.add(index);
	var myindex = index+"-"+attr;
	if (node instanceof Object) {
		currentElement.id = myindex;
		currentElement.classList.add("config_"+level);
		for(var a in node){
			var rowElement = document.createElement("div");
			rowElement.classList.add("row");
			var labelElement = document.createElement("div");
			labelElement.classList.add("col-25");
			if (a=="class") {
				label = "Type";
			} else if (a=="class") {
				label = "Identifier";
			} else {
				label = a;
			}
			labelElement.innerHTML = "<label for='"+myindex+"-"+a+"'>"
				+label+"</label>";
			rowElement.appendChild(labelElement);
			var attrElement = getElement(myindex, a, node[a], level+1);
			rowElement.appendChild(attrElement);
			currentElement.appendChild(rowElement);
		}
	} else {
		custumInputAttr = ""
		if (attr=="class") {
			custumInputAttr = "readonly ";
			attr = "Type";
		} else if (attr=="class") {
			attr = "Identifier";
		}
		currentElement.innerHTML = "<input type='text' id='"+myindex+"'"
			+custumInputAttr+"value='"+node+"'/>";
	}
	return currentElement;
}
const noSelectObjects = [
	"newnode-contract-peakprice",
	"newnode-contract-offpeakprice"
];
function newNodeAddObject(elementId, element, object) {
	console.log("newNodeAddObject(",elementId, element, object,")");
	for (caract in object) {
		defaultValue = object[caract]
		console.log("newNodeSelectChange() : ",caract," : ",defaultValue)
		var elem = document.createElement("div");
		elem.classList.add("row");
		elem.classList.add(caract);
		var sElementId = elementId+"-"+caract;
		if (defaultValue instanceof Array) {
			console.log("defaultValue array =",defaultValue);
			defaultValue = JSON.stringify(defaultValue);
			console.log("defaultValue array => ",defaultValue);
		}
		if (defaultValue instanceof Object) {
			elem.innerHTML = '<div class="col-25">'
				+'<label for="'+sElementId+'">'+caract+'</label>'
				+'</div><div class="col-75" id="'+sElementId+'"></div>';
			element.append(elem);
			elem2 = document.getElementById(sElementId);
			if (noSelectObjects.includes(sElementId)) {
				newNodeAddObject(sElementId, elem2, defaultValue);
			} else {
				displaySelectElement(sElementId, elem2, defaultValue);
			}
		} else {
			elem.id = sElementId;
			elem.innerHTML = '<div class="col-25">'
				+'<label for="newNode-'+caract+'">'+caract+'</label>'
				+'</div><div class="col-75">'
				+'<input type="text" id="'+sElementId+'-value"'
					+' value="" /></div>';
			element.append(elem);
			 // To avoid encode problems.
			document.getElementById(sElementId+'-value').value = defaultValue;
		}
	}
}
/*
*/
function newNodeSelectChange(selectElementId) {
	var select = document.getElementById(selectElementId+"-select");
	console.log("newNodeSelectChange(",selectElementId,") => ", select.value);
	objectList = objectLists[selectElementId];
	// Warning : Should be better to remove sub-select from selectList but difficult 
	//   We choice to let that memory-leak
	nodeConfig = objectList[select.value];
	addNodeSelecForm = document.getElementById(selectElementId+"-form");
	addNodeSelecForm.innerHTML = "";
	newNodeAddObject(selectElementId, addNodeSelecForm, nodeConfig);
}
function displaySelectElement(elementId, selectDiv, objectList) {
	var selectElement = document.createElement("select");
	selectElement.id = elementId+"-select";
	objectLists[elementId] = objectList;
	selectElement.onchange = function() {
		newNodeSelectChange(elementId);
	};
	var optionElement = document.createElement("option");
	optionElement.value = "";
	optionElement.innerHTML = " - Please select - ";
	selectElement.appendChild(optionElement);
	for (attr in objectList) {
		var optionElement = document.createElement("option");
		optionElement.innerHTML = attr;
		selectElement.appendChild(optionElement);
	}
	selectDiv.appendChild(selectElement);
	var form = document.createElement("div");
	form.id = elementId+'-form';
	selectDiv.appendChild(form);
}
function addNode(index, node) {
	alert("Add Node");
}
var initAddNodePopup = false
function displayAddNodePopup() {
	console.log("displayAddNodePopup()")
	if (!initAddNodePopup) {
		var selectDiv = document.getElementById("newnode-class");
		console.log("displayAddNodePopup() : initAddNodePopup", selectDiv);
		displaySelectElement("newnode", selectDiv, availableNodes);
		initAddNodePopup = true;
	}
	var popup = document.getElementById("addNodePopup");
	popup.classList.add("show");
	popup.style.visibility = "visible";
}
function hideAddNodePopup() {
  // console.log("hideAddNodePopup()")
  var popup = document.getElementById("addNodePopup");
  popup.classList.remove("show");
  popup.style.visibility = "hidden";
}
function displayNode(index, node) {
	currentElement = getElement("node", index, node);
	document.getElementById("nodes").appendChild(currentElement);
}
function displayNetwork() {
	for (n in network) {
		node = network[n];
		console.log("Node:", node);
		displayNode(n, node);
	}
}
$( function() {
	$( "#yamlParams" ).tabs();
	// $("#addNodePopup").popup();
	getNetwork();
	displayNetwork();
} );
</script>
</body>
</html>
